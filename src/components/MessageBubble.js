// components/MessageBubble.js
import ReactMarkdown from 'react-markdown';
import remarkGfm from 'remark-gfm'; // Optional: For GitHub Flavored Markdown (tables, task lists, strikethrough)

export default function MessageBubble({ text, sender }) {
  const isUser = sender === 'user';

  // Determine the background and text color based on the sender
  const backgroundColor = isUser ? 'bg-blue-600' : 'bg-gray-200';
  const textColor = isUser ? 'text-white' : 'text-gray-800';

  // Determine the rounded corners. User messages have rounded-br-none, bot messages rounded-bl-none.
  const borderRadius = isUser ? 'rounded-br-none' : 'rounded-bl-none';

  return (
    <div className={`flex ${isUser ? 'justify-end' : 'justify-start'}`}>
      <div
        className={`max-w-[75%] px-4 py-2 text-sm rounded-2xl shadow-md ${backgroundColor} ${textColor} ${borderRadius}`}
      >
        {!isUser ? ( // If it's a bot message, render with ReactMarkdown
          <ReactMarkdown
            remarkPlugins={[remarkGfm]} // Apply GitHub Flavored Markdown
            components={{
              // Customize rendering of HTML elements generated by Markdown
              // This is where you apply Tailwind CSS classes to maintain consistent styling.
              
              // Paragraphs: Add some margin for better readability
              p: ({ node, ...props }) => <p className="mb-1 last:mb-0" {...props} />,

              // Headings: Basic styling for different heading levels
              h1: ({ node, ...props }) => <h1 className="text-xl font-bold mb-2 mt-4" {...props} />,
              h2: ({ node, ...props }) => <h2 className="text-lg font-semibold mb-1 mt-3" {...props} />,
              h3: ({ node, ...props }) => <h3 className="text-md font-medium mb-1 mt-2" {...props} />,

              // Lists: Unordered (bullets) and Ordered (numbers)
              li: ({ node, ...props }) => <li className="pl-1" {...props} />, // Slight padding for list items

              // Links: Make them blue and underlined
              a: ({ node, ...props }) => <a {...props} className="text-blue-700 hover:underline" target="_blank" rel="noopener noreferrer" />,

              // Strong (bold) and Emphasis (italic)
              strong: ({ node, ...props }) => <strong className="font-bold" {...props} />,
              em: ({ node, ...props }) => <em className="italic" {...props} />,

              // Code blocks (inline and multiline)
              code: ({ node, inline, ...props }) => {
                return inline ? (
                  <code className="bg-gray-300 px-1 py-0.5 rounded text-red-700 text-xs" {...props} />
                ) : (
                  <pre className="bg-gray-700 text-gray-100 p-2 rounded text-xs overflow-x-auto my-2">
                    <code {...props} />
                  </pre>
                );
              },
              // Blockquote
              blockquote: ({ node, ...props }) => <blockquote className="border-l-4 border-gray-400 pl-3 italic text-gray-600 my-2" {...props} />,
              
              // Horizontal Rule
              hr: ({ node, ...props }) => <hr className="border-t border-gray-300 my-4" {...props} />,

              // Images (optional, if your bot returns image markdown)
              img: ({ node, ...props }) => <img className="max-w-full h-auto rounded-md my-2" {...props} />,
            }}
          >
            {text}
          </ReactMarkdown>
        ) : (
          text // If it's a user message, render plain text
        )}
      </div>
    </div>
  );
}